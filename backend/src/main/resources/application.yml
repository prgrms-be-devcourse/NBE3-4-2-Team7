logging:
  level:
    org.springframework.messaging: DEBUG
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG
    com.tripmarket.global.oauth2: DEBUG
server:
  port: 8080

spring:
  profiles:
    include: secret
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${kakao.client.id}
            client-secret: ${kakao.client.secret}
            redirect-uri: "http://localhost:8080/login/oauth2/code/kakao"
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            scope:
              - profile_nickname
              - profile_image
              - account_email
            client-name: Kakao
          google:
            client-id: ${google.client.id}
            client-secret: ${google.client.secret}
            redirect-uri: "http://localhost:8080/login/oauth2/code/google"
            scope:
              - email
              - profile
          github:
            client-id: ${github.client.id}
            client-secret: ${github.client.secret}
            redirect-uri: "http://localhost:8080/login/oauth2/code/github"
            scope:
              - read:user
              - user:email
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user
            user-name-attribute: id
      authorized-redirect-uri: "http://localhost:3000/oauth/callback" # 프론트엔드 리다이렉트 URI
  h2:
    console:
      enabled: true
      path: /h2-console

  datasource:
    url: jdbc:h2:file:./backend/db/tripmarket;MODE=MYSQL
    username: sa
    password:
    driver-class-name: org.h2.Driver

  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    #      ddl-auto: create
    properties:
      hibernate:
        default_batch_fetch_size: 100
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
        highlight_sql: true
        use_sql_comments: true
    defer-datasource-initialization: true

  #    sql:
  #      init:
  #        mode: never

  data:
    mongodb:
      uri: mongodb://root:1234@localhost:27017/chatdb?authSource=admin
    redis:
      host: localhost
      port: 6379
  rabbitmq:
    dynamic: true
    host: "localhost"
    port: 5672
    virtual-host: "/"
    username: "guest"
    password: "guest"
    chat:
      queue:
        name: "chat.queue"
      exchange:
        name: "chat.exchange"
      routing:
        key: "*.room."
    relay:
      port: 61613
      system-login: guest
      system-passcode: guest
      client-login: guest
      client-passcode: guest
    listener:
      simple:
        auto-startup: true
springdoc:
  api-docs:
    path: /api-docs
    groups:
      enabled: true
  swagger-ui:
    path: /swagger-ui
    enabled: true
    groups-order: asc
    tags-sorter: alpha
    operations-sorter: alpha
    display-request-duration: true
    doc-expansion: none
    disable-swagger-default-url: true
  cache:
    disabled: true
  override-with-generic-response: false
  model-and-view-allowed: true
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
